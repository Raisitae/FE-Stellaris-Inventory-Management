/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SalesIndexImport } from './routes/sales/index'
import { Route as ReportsIndexImport } from './routes/reports/index'
import { Route as RegisterIndexImport } from './routes/register/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as BackupIndexImport } from './routes/backup/index'
import { Route as ProductsIdImport } from './routes/products/$id'
import { Route as ProductsAddIndexImport } from './routes/products/add/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SalesIndexRoute = SalesIndexImport.update({
  id: '/sales/',
  path: '/sales/',
  getParentRoute: () => rootRoute,
} as any)

const ReportsIndexRoute = ReportsIndexImport.update({
  id: '/reports/',
  path: '/reports/',
  getParentRoute: () => rootRoute,
} as any)

const RegisterIndexRoute = RegisterIndexImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const BackupIndexRoute = BackupIndexImport.update({
  id: '/backup/',
  path: '/backup/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIdRoute = ProductsIdImport.update({
  id: '/products/$id',
  path: '/products/$id',
  getParentRoute: () => rootRoute,
} as any)

const ProductsAddIndexRoute = ProductsAddIndexImport.update({
  id: '/products/add/',
  path: '/products/add/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/products/$id': {
      id: '/products/$id'
      path: '/products/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof ProductsIdImport
      parentRoute: typeof rootRoute
    }
    '/backup/': {
      id: '/backup/'
      path: '/backup'
      fullPath: '/backup'
      preLoaderRoute: typeof BackupIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexImport
      parentRoute: typeof rootRoute
    }
    '/reports/': {
      id: '/reports/'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsIndexImport
      parentRoute: typeof rootRoute
    }
    '/sales/': {
      id: '/sales/'
      path: '/sales'
      fullPath: '/sales'
      preLoaderRoute: typeof SalesIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/add/': {
      id: '/products/add/'
      path: '/products/add'
      fullPath: '/products/add'
      preLoaderRoute: typeof ProductsAddIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/products/$id': typeof ProductsIdRoute
  '/backup': typeof BackupIndexRoute
  '/login': typeof LoginIndexRoute
  '/products': typeof ProductsIndexRoute
  '/register': typeof RegisterIndexRoute
  '/reports': typeof ReportsIndexRoute
  '/sales': typeof SalesIndexRoute
  '/products/add': typeof ProductsAddIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/products/$id': typeof ProductsIdRoute
  '/backup': typeof BackupIndexRoute
  '/login': typeof LoginIndexRoute
  '/products': typeof ProductsIndexRoute
  '/register': typeof RegisterIndexRoute
  '/reports': typeof ReportsIndexRoute
  '/sales': typeof SalesIndexRoute
  '/products/add': typeof ProductsAddIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/products/$id': typeof ProductsIdRoute
  '/backup/': typeof BackupIndexRoute
  '/login/': typeof LoginIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/register/': typeof RegisterIndexRoute
  '/reports/': typeof ReportsIndexRoute
  '/sales/': typeof SalesIndexRoute
  '/products/add/': typeof ProductsAddIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/products/$id'
    | '/backup'
    | '/login'
    | '/products'
    | '/register'
    | '/reports'
    | '/sales'
    | '/products/add'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/products/$id'
    | '/backup'
    | '/login'
    | '/products'
    | '/register'
    | '/reports'
    | '/sales'
    | '/products/add'
  id:
    | '__root__'
    | '/'
    | '/products/$id'
    | '/backup/'
    | '/login/'
    | '/products/'
    | '/register/'
    | '/reports/'
    | '/sales/'
    | '/products/add/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProductsIdRoute: typeof ProductsIdRoute
  BackupIndexRoute: typeof BackupIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  RegisterIndexRoute: typeof RegisterIndexRoute
  ReportsIndexRoute: typeof ReportsIndexRoute
  SalesIndexRoute: typeof SalesIndexRoute
  ProductsAddIndexRoute: typeof ProductsAddIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProductsIdRoute: ProductsIdRoute,
  BackupIndexRoute: BackupIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  RegisterIndexRoute: RegisterIndexRoute,
  ReportsIndexRoute: ReportsIndexRoute,
  SalesIndexRoute: SalesIndexRoute,
  ProductsAddIndexRoute: ProductsAddIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/products/$id",
        "/backup/",
        "/login/",
        "/products/",
        "/register/",
        "/reports/",
        "/sales/",
        "/products/add/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/products/$id": {
      "filePath": "products/$id.tsx"
    },
    "/backup/": {
      "filePath": "backup/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    },
    "/register/": {
      "filePath": "register/index.tsx"
    },
    "/reports/": {
      "filePath": "reports/index.tsx"
    },
    "/sales/": {
      "filePath": "sales/index.tsx"
    },
    "/products/add/": {
      "filePath": "products/add/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
